<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.linkwee.web.dao.AcBalanceRecordMapper">
	<!-- Result Map-->
	<resultMap  type="com.linkwee.web.model.acc.AcBalanceRecord" id="BaseResultMap">
		<result column="id" property="id" jdbcType="INTEGER"/>
		<result column="user_type" property="userType" jdbcType="INTEGER"/>
		<result column="user_id" property="userId" jdbcType="VARCHAR"/>
		<result column="bank_card_id" property="bankCardId" jdbcType="VARCHAR"/>
		<result column="trans_type" property="transType" jdbcType="INTEGER"/>
		<result column="order_id" property="orderId" jdbcType="VARCHAR"/>
		<result column="deal_id" property="dealId" jdbcType="VARCHAR"/>
		<result column="trans_amount" property="transAmount" jdbcType="DECIMAL"/>
		<result column="fee" property="fee" jdbcType="DECIMAL"/>
		<result column="trans_date" property="transDate" jdbcType="TIMESTAMP"/>
		<result column="serial_number" property="serialNumber" jdbcType="VARCHAR"/>
		<result column="create_time" property="createTime" jdbcType="TIMESTAMP"/>
		<result column="create_person" property="createPerson" jdbcType="VARCHAR"/>
		<result column="last_update_time" property="lastUpdateTime" jdbcType="TIMESTAMP"/>
		<result column="last_update_person" property="lastUpdatePerson" jdbcType="VARCHAR"/>
		<result column="remark" property="remark" jdbcType="VARCHAR"/>
		<result column="signature" property="signature" jdbcType="VARCHAR"/>
		<result column="extend1" property="extend1" jdbcType="VARCHAR"/>
		<result column="extend2" property="extend2" jdbcType="VARCHAR"/>
		<result column="create_type" property="createType" jdbcType="INTEGER"/>
	</resultMap>
	
	<resultMap  type="com.linkwee.web.model.acc.AcBalanceRecord" id="RecordResultMap">
		<result column="user_type" property="userType" jdbcType="INTEGER"/>
		<result column="bank_card_id" property="bankCardId" jdbcType="VARCHAR"/>
		<result column="trans_type" property="transType" jdbcType="INTEGER"/>
		<result column="order_id" property="orderId" jdbcType="VARCHAR"/>
		<result column="deal_id" property="dealId" jdbcType="VARCHAR"/>
		<result column="trans_amount" property="transAmount" jdbcType="DECIMAL"/>
		<result column="fee" property="fee" jdbcType="DECIMAL"/>
		<result column="trans_date" property="transDate" jdbcType="TIMESTAMP"/>
		<result column="remark" property="remark" jdbcType="VARCHAR"/>
		<result column="type_name" property="typeName" jdbcType="VARCHAR"/>
		<result column="create_time" property="createTime" jdbcType="TIMESTAMP"/>
		<result column="status" property="status" jdbcType="VARCHAR"/>
		<result column="paymentDate" property="paymentDate" jdbcType="VARCHAR"/>
	</resultMap>
	
	<resultMap  type="com.linkwee.web.model.acc.AcBalanceRecord" id="BalanceResultMap">
		<result column="id" property="id" jdbcType="INTEGER"/>
		<result column="user_type" property="userType" jdbcType="INTEGER"/>
		<result column="type_name" property="typeName" jdbcType="INTEGER"/>
		<result column="order_id" property="orderId" jdbcType="VARCHAR"/>
		<result column="deal_id" property="dealId" jdbcType="VARCHAR"/>
		<result column="trans_amount" property="transAmount" jdbcType="DECIMAL"/>
		<result column="fee" property="fee" jdbcType="DECIMAL"/>
		<result column="trans_date" property="transDate" jdbcType="TIMESTAMP"/>
		<result column="serial_number" property="serialNumber" jdbcType="VARCHAR"/>
		<result column="create_time" property="createTime" jdbcType="TIMESTAMP"/>
		<result column="remark" property="remark" jdbcType="VARCHAR"/>
		<result column="user_name" property="userName" jdbcType="VARCHAR"/>
		<result column="mobile" property="mobile" jdbcType="VARCHAR"/>
	</resultMap>
	
	
	<resultMap  type="com.linkwee.web.model.acc.MonthProfixTotalListResp" id="MonthProfixTotalListResponseMap">
		<result column="f_month" property="month" jdbcType="VARCHAR"/>
		<result column="total_amount" property="totalAmount" jdbcType="DOUBLE"/>
	</resultMap>
	
	<resultMap  type="com.linkwee.web.model.acc.AccountBalanceListResp" id="AccountBalanceListMap">
		<result column="type_name" property="typeName" jdbcType="VARCHAR"/>
		<result column="trans_amount" property="amount" jdbcType="DECIMAL"/>
		<result column="trans_date" property="transDate" jdbcType="TIMESTAMP"/>
		<result column="fee" property="fee" jdbcType="DECIMAL"/>
		<result column="remark" property="remark" jdbcType="VARCHAR"/>
	</resultMap>
	
  <sql id="Base_Column_List">
    <trim suffixOverrides=",">
	    	id,
	    	user_type,
	    	user_id,
	    	bank_card_id,
	    	trans_type,
	    	order_id,
	    	deal_id,
	    	trans_amount,
	    	fee,
	    	trans_date,
	    	serial_number,
	    	create_time,
	    	create_person,
	    	last_update_time,
	    	last_update_person,
	    	remark,
	    	signature,
	    	extend1,
	    	extend2,
    </trim>
  </sql>  
  
  <sql id="Base_Condition">
		<if test=" null != id ">
			and id = #{id}
		</if>
		<if test=" null != userType ">
			and user_type = #{userType}
		</if>
		<if test=" null != userId and ''!= userId  ">
			and user_id = #{userId}
		</if>
		<if test=" null != bankCardId and ''!= bankCardId  ">
			and bank_card_id = #{bankCardId}
		</if>
		<if test=" null != transType ">
			and trans_type = #{transType}
		</if>
		<if test=" null != orderId and ''!= orderId  ">
			and order_id = #{orderId}
		</if>
		<if test=" null != dealId and ''!= dealId  ">
			and deal_id = #{dealId}
		</if>
		<if test=" null != transAmount ">
			and trans_amount = #{transAmount}
		</if>
		<if test=" null != fee ">
			and fee = #{fee}
		</if>
		<if test=" null != transDate ">
			and trans_date = #{transDate}
		</if>
		<if test=" null != serialNumber and ''!= serialNumber  ">
			and serial_number = #{serialNumber}
		</if>
		<if test=" null != createTime ">
			and create_time = #{createTime}
		</if>
		<if test=" null != createPerson and ''!= createPerson  ">
			and create_person = #{createPerson}
		</if>
		<if test=" null != lastUpdateTime ">
			and last_update_time = #{lastUpdateTime}
		</if>
		<if test=" null != lastUpdatePerson and ''!= lastUpdatePerson  ">
			and last_update_person = #{lastUpdatePerson}
		</if>
		<if test=" null != remark and ''!= remark  ">
			and remark = #{remark}
		</if>
		<if test=" null != signature and ''!= signature  ">
			and signature = #{signature}
		</if>
		<if test=" null != extend1 and ''!= extend1  ">
			and extend1 = #{extend1}
		</if>
		<if test=" null != extend2 and ''!= extend2  ">
			and extend2 = #{extend2}
		</if>
  </sql>
  
  <select id="queryTotalIncome" resultType="Double">
       select case when sum(trans_amount) is null then 0 else sum(trans_amount) end  from tac_balance_record where user_id = #{userId} and user_type=2 and trans_type in (3,4,5)
  </select>
  
  <select id="queryRewardIncome" resultType="Double">
       select case when sum(trans_amount) is null then 0 else sum(trans_amount) end  from tac_balance_record where user_id = #{userId} and trans_type not in (2,25)
  </select>
  
  <select id="queryRewardOut" resultType="Double">
<!--   	   select case when sum(total_amount) is null then 0  else sum(total_amount) end from tac_withdraw_apply where user_id = #{userId} and status not in (6,7)  -->
  		select sum(amount) from (select ifnull(sum(total_amount), 0) amount from tac_withdraw_apply where user_id = #{userId} and status not in (6,7) 
	union all 
		select ifnull(sum(trans_amount), 0) amount from tac_balance_record where user_id = #{userId} and trans_type = 25) t
  </select>
  
  <select id="checkSameSerialNumber" resultMap="BaseResultMap"  parameterType="com.linkwee.web.model.acc.AcBalanceRecord">
		select <include refid="Base_Column_List" /> from tac_balance_record 
		where serial_number = #{serialNumber}
  </select>
  
  <select id="selectOneByCondition" resultMap="BaseResultMap"  parameterType="com.linkwee.web.model.acc.AcBalanceRecord">
		select <include refid="Base_Column_List" /> from tac_balance_record 
		where 1=1 <include refid="Base_Condition" />
  </select>
  
  <select id="selectByCondition" resultMap="BaseResultMap"  parameterType="com.linkwee.web.model.acc.AcBalanceRecord">
		select <include refid="Base_Column_List" /> from tac_balance_record 
		where 1=1 <include refid="Base_Condition" />
  </select>

  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Column_List" />
    from tac_balance_record
    where  id = #{0}
  </select>
  
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from tac_balance_record
    where id = #{0}
  </delete>

  <insert id="insert" parameterType="com.linkwee.web.model.acc.AcBalanceRecord" >
    INSERT INTO tac_balance_record
		<trim prefix="(" suffix=")" suffixOverrides=",">
			 	<if test=" null != id ">
					id,
				</if>
			 	<if test=" null != userType ">
					user_type,
				</if>
			 	<if test=" null != userId and ''!= userId  ">
					user_id,
				</if>
			 	<if test=" null != bankCardId and ''!= bankCardId  ">
					bank_card_id,
				</if>
			 	<if test=" null != transType ">
					trans_type,
				</if>
			 	<if test=" null != orderId and ''!= orderId  ">
					order_id,
				</if>
			 	<if test=" null != dealId and ''!= dealId  ">
					deal_id,
				</if>
			 	<if test=" null != transAmount ">
					trans_amount,
				</if>
				<if test=" null != fee ">
					fee,
				</if>
			 	<if test=" null != transDate ">
					trans_date,
				</if>
			 	<if test=" null != serialNumber and ''!= serialNumber  ">
					serial_number,
				</if>
			 	<if test=" null != createTime ">
					create_time,
				</if>
			 	<if test=" null != createPerson and ''!= createPerson  ">
					create_person,
				</if>
			 	<if test=" null != lastUpdateTime ">
					last_update_time,
				</if>
			 	<if test=" null != lastUpdatePerson and ''!= lastUpdatePerson  ">
					last_update_person,
				</if>
			 	<if test=" null != remark and ''!= remark  ">
					remark,
				</if>
			 	<if test=" null != signature and ''!= signature  ">
					signature,
				</if>
			 	<if test=" null != extend1 and ''!= extend1  ">
					extend1,
				</if>
			 	<if test=" null != extend2 and ''!= extend2  ">
					extend2,
				</if>
		</trim>
		<trim prefix="VALUES(" suffix=")" suffixOverrides=",">
			 	<if test=" null != id ">
					 	#{id},
				</if>
			 	<if test=" null != userType ">
					 	#{userType},
				</if>
			 	<if test=" null != userId and ''!= userId  ">
					 	#{userId},
				</if>
			 	<if test=" null != bankCardId and ''!= bankCardId  ">
					 	#{bankCardId},
				</if>
			 	<if test=" null != transType ">
					 	#{transType},
				</if>
			 	<if test=" null != orderId and ''!= orderId  ">
					 	#{orderId},
				</if>
			 	<if test=" null != dealId and ''!= dealId  ">
					 	#{dealId},
				</if>
			 	<if test=" null != transAmount ">
					 	#{transAmount},
				</if>
				<if test=" null != fee ">
					    #{fee},
				</if>
			 	<if test=" null != transDate ">
					 	#{transDate},
				</if>
			 	<if test=" null != serialNumber and ''!= serialNumber  ">
					 	#{serialNumber},
				</if>
			 	<if test=" null != createTime ">
					 	#{createTime},
				</if>
			 	<if test=" null != createPerson and ''!= createPerson  ">
					 	#{createPerson},
				</if>
			 	<if test=" null != lastUpdateTime ">
					 	#{lastUpdateTime},
				</if>
			 	<if test=" null != lastUpdatePerson and ''!= lastUpdatePerson  ">
					 	#{lastUpdatePerson},
				</if>
			 	<if test=" null != remark and ''!= remark  ">
					 	#{remark},
				</if>
			 	<if test=" null != signature and ''!= signature  ">
					 	#{signature},
				</if>
			 	<if test=" null != extend1 and ''!= extend1  ">
					 	#{extend1},
				</if>
			 	<if test=" null != extend2 and ''!= extend2  ">
					 	#{extend2},
				</if>
		</trim>
  </insert>
  
  <insert id="insertSelective" parameterType="com.linkwee.web.model.acc.AcBalanceRecord" useGeneratedKeys="true" keyProperty="id" >
		INSERT INTO tac_balance_record
		<trim prefix="(" suffix=")" suffixOverrides=",">
			 	<if test=" null != id ">
					id,
				</if>
			 	<if test=" null != userType ">
					user_type,
				</if>
			 	<if test=" null != userId and ''!= userId  ">
					user_id,
				</if>
			 	<if test=" null != bankCardId and ''!= bankCardId  ">
					bank_card_id,
				</if>
			 	<if test=" null != transType ">
					trans_type,
				</if>
			 	<if test=" null != orderId and ''!= orderId  ">
					order_id,
				</if>
			 	<if test=" null != dealId and ''!= dealId  ">
					deal_id,
				</if>
			 	<if test=" null != transAmount ">
					trans_amount,
				</if>
				<if test=" null != fee ">
					fee,
				</if>
			 	<if test=" null != transDate ">
					trans_date,
				</if>
			 	<if test=" null != serialNumber and ''!= serialNumber  ">
					serial_number,
				</if>
			 	<if test=" null != createTime ">
					create_time,
				</if>
			 	<if test=" null != createPerson and ''!= createPerson  ">
					create_person,
				</if>
			 	<if test=" null != lastUpdateTime ">
					last_update_time,
				</if>
			 	<if test=" null != lastUpdatePerson and ''!= lastUpdatePerson  ">
					last_update_person,
				</if>
			 	<if test=" null != remark and ''!= remark  ">
					remark,
				</if>
				<if test=" null != createType and ''!= createType  ">
					create_type,
				</if>
			 	<if test=" null != signature and ''!= signature  ">
					signature,
				</if>
			 	<if test=" null != extend1 and ''!= extend1  ">
					extend1,
				</if>
			 	<if test=" null != extend2 and ''!= extend2  ">
					extend2,
				</if>
		</trim>
		<trim prefix="VALUES(" suffix=")" suffixOverrides=",">
			 	<if test=" null != id ">
					 	#{id},
				</if>
			 	<if test=" null != userType ">
					 	#{userType},
				</if>
			 	<if test=" null != userId and ''!= userId  ">
					 	#{userId},
				</if>
			 	<if test=" null != bankCardId and ''!= bankCardId  ">
					 	#{bankCardId},
				</if>
			 	<if test=" null != transType ">
					 	#{transType},
				</if>
			 	<if test=" null != orderId and ''!= orderId  ">
					 	#{orderId},
				</if>
			 	<if test=" null != dealId and ''!= dealId  ">
					 	#{dealId},
				</if>
			 	<if test=" null != transAmount ">
					 	#{transAmount},
				</if>
				<if test=" null != fee ">
					 	#{fee},
				</if>
			 	<if test=" null != transDate ">
					 	#{transDate},
				</if>
			 	<if test=" null != serialNumber and ''!= serialNumber  ">
					 	#{serialNumber},
				</if>
			 	<if test=" null != createTime ">
					 	#{createTime},
				</if>
			 	<if test=" null != createPerson and ''!= createPerson  ">
					 	#{createPerson},
				</if>
			 	<if test=" null != lastUpdateTime ">
					 	#{lastUpdateTime},
				</if>
			 	<if test=" null != lastUpdatePerson and ''!= lastUpdatePerson  ">
					 	#{lastUpdatePerson},
				</if>
			 	<if test=" null != remark and ''!= remark  ">
					 	#{remark},
				</if>
				<if test=" null != createType and ''!= createType  ">
					    #{createType},
				</if>
			 	<if test=" null != signature and ''!= signature  ">
					 	#{signature},
				</if>
			 	<if test=" null != extend1 and ''!= extend1  ">
					 	#{extend1},
				</if>
			 	<if test=" null != extend2 and ''!= extend2  ">
					 	#{extend2},
				</if>
		</trim>
	</insert>
  
  <update id="updateByPrimaryKeySelective" parameterType="com.linkwee.web.model.acc.AcBalanceRecord" >
  		UPDATE tac_balance_record
		<set>
			<trim suffixOverrides=",">
					<if test=" null != userType ">
						user_type = #{userType},
					</if>
					<if test=" null != userId and ''!= userId  ">
						user_id = #{userId},
					</if>
					<if test=" null != bankCardId and ''!= bankCardId  ">
						bank_card_id = #{bankCardId},
					</if>
					<if test=" null != transType ">
						trans_type = #{transType},
					</if>
					<if test=" null != orderId and ''!= orderId  ">
						order_id = #{orderId},
					</if>
					<if test=" null != dealId and ''!= dealId  ">
						deal_id = #{dealId},
					</if>
					<if test=" null != transAmount ">
						trans_amount = #{transAmount},
					</if>
					<if test=" null != fee ">
						fee = #{fee},
					</if>
					<if test=" null != transDate ">
						trans_date = #{transDate},
					</if>
					<if test=" null != serialNumber and ''!= serialNumber  ">
						serial_number = #{serialNumber},
					</if>
					<if test=" null != createTime ">
						create_time = #{createTime},
					</if>
					<if test=" null != createPerson and ''!= createPerson  ">
						create_person = #{createPerson},
					</if>
					<if test=" null != lastUpdateTime ">
						last_update_time = #{lastUpdateTime},
					</if>
					<if test=" null != lastUpdatePerson and ''!= lastUpdatePerson  ">
						last_update_person = #{lastUpdatePerson},
					</if>
					<if test=" null != remark and ''!= remark  ">
						remark = #{remark},
					</if>
					<if test=" null != signature and ''!= signature  ">
						signature = #{signature},
					</if>
					<if test=" null != extend1 and ''!= extend1  ">
						extend1 = #{extend1},
					</if>
					<if test=" null != extend2 and ''!= extend2  ">
						extend2 = #{extend2},
					</if>
			</trim>
		</set>
		<where>
			 id = #{id}
		</where>
	</update>
  
	<update id="updateByPrimaryKey" parameterType="com.linkwee.web.model.acc.AcBalanceRecord" >
	    UPDATE tac_balance_record
	   <set>
			<trim suffixOverrides=",">
					<if test=" null != userType ">
						user_type = #{userType},
					</if>
					<if test=" null != userId and ''!= userId  ">
						user_id = #{userId},
					</if>
					<if test=" null != bankCardId and ''!= bankCardId  ">
						bank_card_id = #{bankCardId},
					</if>
					<if test=" null != transType ">
						trans_type = #{transType},
					</if>
					<if test=" null != orderId and ''!= orderId  ">
						order_id = #{orderId},
					</if>
					<if test=" null != dealId and ''!= dealId  ">
						deal_id = #{dealId},
					</if>
					<if test=" null != transAmount ">
						trans_amount = #{transAmount},
					</if>
					<if test=" null != fee ">
						fee = #{fee},
					</if>
					<if test=" null != transDate ">
						trans_date = #{transDate},
					</if>
					<if test=" null != serialNumber and ''!= serialNumber  ">
						serial_number = #{serialNumber},
					</if>
					<if test=" null != createTime ">
						create_time = #{createTime},
					</if>
					<if test=" null != createPerson and ''!= createPerson  ">
						create_person = #{createPerson},
					</if>
					<if test=" null != lastUpdateTime ">
						last_update_time = #{lastUpdateTime},
					</if>
					<if test=" null != lastUpdatePerson and ''!= lastUpdatePerson  ">
						last_update_person = #{lastUpdatePerson},
					</if>
					<if test=" null != remark and ''!= remark  ">
						remark = #{remark},
					</if>
					<if test=" null != signature and ''!= signature  ">
						signature = #{signature},
					</if>
					<if test=" null != extend1 and ''!= extend1  ">
						extend1 = #{extend1},
					</if>
					<if test=" null != extend2 and ''!= extend2  ">
						extend2 = #{extend2},
					</if>
			</trim>
		</set>
		<where>
			id = #{0}
		</where>
	  </update>
	  
	<select id="queryAllAccountDetails" resultMap="RecordResultMap" >
        SELECT 
    	b.user_type,b.trans_type,b.trans_amount,b.trans_date,b.remark,b.create_time,a.type_name,b.status,b.fee,b.paymentDate 
	  FROM (select br.user_id,br.trans_amount,br.remark,br.user_type,br.trans_type,br.trans_date,br.create_time,
    case when br.trans_type=2 then '5' end as status,case when br.trans_type=2 then br.fee end as fee,'' paymentDate   
    from tac_balance_record br where br.user_id=#{userId}   
	     union all 
	     select wa.user_id,wa.amount as trans_amount,wa.remark,wa.user_type,'2' trans_type,wa.created_date,wa.created_date as create_time,wa.status,
      wa.fee,wa.payment_date as paymentDate from tac_withdraw_apply wa 
	     where wa.user_id=#{userId}  and wa.status not in (5)
	  )  b,tac_account_type a  WHERE b.trans_type = a.type_value 
 		 AND b.user_id = #{userId} 
       ORDER BY b.create_time DESC
	</select>
	  
	<select id="queryMyAccountDetails" resultMap="RecordResultMap" >
	        SELECT 
	    	b.user_type,b.bank_card_id,b.trans_type,b.order_id,b.deal_id,b.trans_amount,b.fee,b.trans_date,b.remark,b.create_time,a.type_name
		  FROM tac_balance_record b,tac_account_type a  WHERE b.trans_type = a.type_value and b.trans_type not in (2,25) 
		  <if test=" null != userType and ''!= userType">
	 		 AND b.user_type = #{userType}
 		  </if>
 		  <if test=" null != userId and ''!= userId">
	 		 AND b.user_id = #{userId}
 		  </if>
 		  <if test=" null != transType and ''!= transType">
	 		 AND b.trans_type = #{transType}
 		  </if>
	       ORDER BY b.create_time DESC
	</select>
	
	<select id="queryMyAccountDetails2" resultMap="RecordResultMap" >
		SELECT b.bank_card_id,b.trans_type,b.order_id,b.deal_id,b.trans_amount,b.fee,b.trans_date,b.remark,b.create_time,
		a.type_name FROM tac_balance_record b,tac_account_type a 
		WHERE  b.trans_type = a.type_value and b.trans_type not in (2) AND b.user_id = #{userId}  and  (b.user_type = #{userType} or (b.user_type != #{userType} and b.trans_type = 2)) 
    	ORDER BY b.create_time DESC
	</select>

	<!-- 账号流水分页条件查询 -->
    <select id="selectBySearchInfo" resultMap="BalanceResultMap" parameterType="com.linkwee.core.datatable.DataTable">
       SELECT c.type_name,b.user_name,b.mobile,a.* 
        from tac_balance_record a LEFT JOIN tcrm_user_info b on a.user_id=b.user_id 
        LEFT JOIN tac_account_type c on a.trans_type=c.type_value
        <where> 
        <if test="dt.search!=null">  
                b.mobile LIKE CONCAT('%','${dt.search.value}','%' )  
         </if>  
         <if test="dt.order!=null">  
               <foreach collection="dt.order" index="index" item="item"
                    open="order by" separator="," close=" ">
                    ${item.name} ${item.dir} 
                </foreach>
         </if>  
        </where>
    </select>
    
    
    <!-- 发放奖励明细 -->
    <select id="selectGrantBySearchInfo" resultMap="BalanceResultMap" parameterType="com.linkwee.core.datatable.DataTable">
       SELECT b.user_name,b.mobile,a.* 
        from tac_balance_record a LEFT JOIN tcrm_user_info b on a.user_id=b.user_id 
        <where> 
               a.create_type = 1
        <if test="dt.search!=null">  
               and b.mobile LIKE CONCAT('%','${dt.search.value}','%' )  
         </if>  
         <if test="dt.order!=null">  
               <foreach collection="dt.order" index="index" item="item"
                    open="order by" separator="," close=" ">
                    ${item.name} ${item.dir} 
                </foreach>
         </if>  
        </where>
    </select>
    
    
    <!-- 月度收益总计列表 -->
    <select id="queryProfixTotalList" resultMap="MonthProfixTotalListResponseMap" >
    
	select 
	t.f_month, t1.profit_cfplanner_id user_id, IFNULL(t1.amount,0) + IFNULL(t2.amount,0) total_amount
	 from 
	(SELECT DISTINCT(date_format(c.create_time, '%Y-%m')) f_month from tsys_homepage_commission c where date_format(c.create_time, '%Y-%m') >= '2016-08' and date_format(c.create_time, '%Y-%m') >= 
	(SELECT date_format(c.create_time, '%Y-%m') from tcrm_cfplanner c where c.user_id=#{userId} )) t
	LEFT JOIN
	(SELECT  date_format(f.create_time, '%Y-%m') as f_month, sum(f.fee_amount) amount, f.profit_cfplanner_id from tcim_feedetail f where f.profit_cfplanner_id =#{userId}
	GROUP BY f_month ) t1
	on t.f_month=t1.f_month
	LEFT JOIN 
	(SELECT date_format(r.create_time, '%Y-%m') as f_month,IFNULL(sum(trans_amount),0) amount, user_id  from tac_balance_record r where user_id=#{userId} and ((trans_type in(12,15) and create_type=1) or trans_type =14 )
	GROUP BY f_month )t2
	on t.f_month=t2.f_month
	ORDER BY f_month desc
    
    
    </select>
    
 <!-- 月度收益总计列表 v2.1-->
    <select id="queryProfixTotalListNew" resultMap="MonthProfixTotalListResponseMap" >
		select 
		t.f_month, t1.profit_cfplanner_id user_id, IFNULL(t1.amount,0) + IFNULL(t2.amount,0) + IFNULL(t3.amount,0) + IFNULL(t4.amount,0) total_amount
		 from 
		(
			SELECT DISTINCT
	          (
	            date_format(c.create_time, '%Y-%m')
	          ) f_month
	        FROM
	          tsys_homepage_commission c
	        WHERE
	          date_format(c.create_time, '%Y-%m') >= '2016-08'
	        AND date_format(c.create_time, '%Y-%m') >= (
	          SELECT
	            date_format(c.create_time, '%Y-%m')
	          FROM
	            tcrm_cfplanner c
	          WHERE
	            c.user_id = #{userId} )
		) t
		LEFT JOIN
		(SELECT  date_format(f.create_time, '%Y-%m') as f_month, sum(f.fee_amount) amount, f.profit_cfplanner_id from tcim_feedetail f where f.profit_cfplanner_id =#{userId}
		GROUP BY f_month ) t1
		on t.f_month=t1.f_month
		LEFT JOIN 
		(SELECT date_format(r.create_time, '%Y-%m') as f_month,IFNULL(sum(trans_amount),0) amount, user_id  from tac_balance_record r 
		where user_id=#{userId}
		 and 
		(
			(date_format(r.create_time, '%Y-%m')>='2017-01'
				 and create_type=0
				and trans_type in (3,4,14,17)
			)
			 or
		  (date_format(r.create_time, '%Y-%m')<![CDATA[<]]> '2017-01'
				and ((trans_type in(12,15) and create_type=1) or trans_type in (3,4,14))
			)
		) 
		GROUP BY f_month )t2
		on t.f_month=t2.f_month
		LEFT JOIN 
		(SELECT date_format(r.reward_time, '%Y-%m') as f_month,IFNULL(sum(trans_amount),0) amount, user_id  from tac_offline_reward_draft r where user_id=#{userId}
		GROUP BY f_month )t3
		on t.f_month=t3.f_month
		
		LEFT JOIN 
		(SELECT date_format(r.create_time, '%Y-%m') as f_month,IFNULL(sum(fee_amount),0) amount, r.profit_cfplanner_id  from tcim_insurance_feedetail r where profit_cfplanner_id=#{userId} 
		GROUP BY f_month )t4
		on t.f_month=t4.f_month
		
		ORDER BY f_month desc  limit  #{limitStart},10
    </select>
    
    <select id="queryProfixTotalListNewTotalCount" resultType="java.lang.Integer" >
        select count(*) from (SELECT DISTINCT
	          (date_format(c.create_time, '%Y-%m')) f_month
	        FROM
	          tsys_homepage_commission c
	        WHERE
	          date_format(c.create_time, '%Y-%m') >= '2016-08'
	        AND date_format(c.create_time, '%Y-%m') >= 
	        (SELECT date_format(c.create_time, '%Y-%m') FROM tcrm_cfplanner c WHERE c.user_id = #{userId})) t
    </select>
    
    <!-- 月度收益明细列表 -->
    <select id="queryMonthProfixDetailList" resultType="com.linkwee.web.model.acc.MonthProfixDetailListResp" >
    <if test="profixType == 1 or profixType == 2 or profixType == 4">
	    SELECT f.fee_rate feeRate, f.create_time createTime, fe.remark,IFNULL(sum(f.fee_amount),0) amount,f.fee_type feeType,'${profixType}' as profixType,
	    case when f.product_id is null then 
		CONCAT( ui.product_dead_line , 
		case when ui.product_dead_line_type=1 then '天' 
		when ui.product_dead_line_type=2 then '月'
		when ui.product_dead_line_type=3 then '年' end )  end as deadline,
		p.product_name productName, IFNULL(f.product_amount,0) productAmount,
		p.is_fixed_deadline isFixedDeadline,
		p.dead_line_min_self_defined deadLineMinSelfDefined,
		p.dead_line_min_value deadLineMinValue,
		p.dead_line_max_self_defined deadLineMaxSelfDefined,
		p.dead_line_max_value deadLineMaxValue,
		(select user_name from tcrm_user_info where user_id=f.origin_cfplanner_id)  originCfplannerName,
		p.is_redemption isRedemption,
		i.org_fee_type orgFeeType
		 from tcim_feedetail f
		LEFT JOIN tcim_fee fe on f.bill_id=fe.bill_id and f.fee_type=fe.fee_type and f.profit_cfplanner_id=fe.profit_cfplanner_id
		LEFT JOIN tcim_product p on f.product_id=p.product_id
		LEFT JOIN tcim_org_info i on p.org_number= i.org_number
		LEFT JOIN tcim_product_unrecord_invest ui on f.bill_id=ui.invest_id
		where f.profit_cfplanner_id=#{userId}
		 	<if test="profixType != null">
		 		<if test="profixType == 1">
					and f.fee_type='1001'
				</if>
				<if test="profixType == 2">
					and f.fee_type='1002'
				</if>
				<if test="profixType == 4">
					and f.fee_type='1004'
				</if>
			</if>
		and date_format(f.create_time, '%Y-%m')=#{month}
		GROUP BY f.bill_id
		ORDER BY f.id desc
    </if>
    <if test="profixType == 3">
	    SELECT r.create_time as createTime,r.trans_amount as amount,r.remark,'${profixType}' as profixType 
	    from tac_balance_record r 
		where user_id=#{userId} and ((trans_type in(12,15) and create_type=1) or trans_type =14 )
		and date_format(r.create_time, '%Y-%m')=#{month}
		ORDER BY r.id desc
    </if>
    
    </select>
    
    
    <!-- 月度收益明细列表v2.1 -->
    <select id="queryMonthProfixDetailListNew" resultType="com.linkwee.web.model.acc.MonthProfixDetailListResp" >
    <if test="profixType == 1">
    <!-- 待发放 -->
	    select * from (
SELECT f.fee_rate feeRate, f.create_time createTime, fe.remark,IFNULL(sum(f.fee_amount),0) amount,f.fee_type feeType,
case when f.fee_type='1001' then '1'
		when f.fee_type='1002' then '2'
		when f.fee_type='1005' then '7'
		when f.fee_type='1006' then '8'  end as profixType,
case when f.fee_type='1001' then '基础佣金'
		when f.fee_type='1002' then '推荐奖励'
		when f.fee_type='1005' then '直接管理津贴'
		when f.fee_type='1006' then '团队管理津贴'
		when f.fee_type='1021' then '个人加佣券加佣' end as profixTypeName,
'' as typeSuffix,
	    case when f.product_id is null then 
		CONCAT( ui.product_dead_line , 
		case when ui.product_dead_line_type=1 then '天' 
		when ui.product_dead_line_type=2 then '月'
		when ui.product_dead_line_type=3 then '年' end )  end as deadline,
		p.product_name productName, IFNULL(f.product_amount,0) productAmount,
		p.is_fixed_deadline isFixedDeadline,
		p.dead_line_min_self_defined deadLineMinSelfDefined,
		p.dead_line_min_value deadLineMinValue,
		p.dead_line_max_self_defined deadLineMaxSelfDefined,
		p.dead_line_max_value deadLineMaxValue,
		(select user_name from tcrm_user_info where user_id=f.origin_cfplanner_id)  originCfplannerName,
		p.is_redemption isRedemption,
		i.org_fee_type orgFeeType
		 from tcim_feedetail f
		LEFT JOIN tcim_fee fe on f.bill_id=fe.bill_id and f.fee_type=fe.fee_type and f.profit_cfplanner_id=fe.profit_cfplanner_id
		LEFT JOIN tcim_product p on f.product_id=p.product_id
		LEFT JOIN tcim_org_info i on p.org_number= i.org_number
		LEFT JOIN tcim_product_unrecord_invest ui on f.bill_id=ui.invest_id
		LEFT JOIN tcim_fee_pay fp on f.balance_number=fp.bill_id
		where f.profit_cfplanner_id=#{userId}
		 	and (fp.`status` is null or fp.`status` != 2)
		and date_format(f.create_time, '%Y-%m')=#{month}
		GROUP BY f.bill_id, f.fee_type
		
union all
SELECT f.product_fee_rate feeRate, f.create_time createTime, fe.remark,IFNULL(sum(f.fee_amount),0) amount,f.fee_type feeType,
case when f.fee_type='1001' then '1'
		when f.fee_type='1002' then '2'
		when f.fee_type='1005' then '7'
		when f.fee_type='1006' then '8'  end as profixType,
case when f.fee_type='1001' then '基础佣金'
		when f.fee_type='1002' then '推荐奖励'
		when f.fee_type='1005' then '直接管理津贴'
		when f.fee_type='1006' then '团队管理津贴' end as profixTypeName,
    '' as typeSuffix,
	  '' deadline,
		p.productName productName, IFNULL(f.product_amount,0) productAmount,
		'' isFixedDeadline,
		'' deadLineMinSelfDefined,
		'' deadLineMinValue,
		'' deadLineMaxSelfDefined,
		'' deadLineMaxValue,
		(select user_name from tcrm_user_info where user_id=f.origin_cfplanner_id)  originCfplannerName,
		'' isRedemption,
		'' orgFeeType
		 from tcim_insurance_feedetail f
		LEFT JOIN tcim_insurance_fee fe on f.bill_id=fe.bill_id and f.fee_type=fe.fee_type and f.profit_cfplanner_id=fe.profit_cfplanner_id
		LEFT JOIN tcim_insurance_product p on f.product_id=p.caseCode
		LEFT JOIN tcim_insurance_info i on p.org_number= i.org_number
		LEFT JOIN tcim_fee_pay fp on f.balance_number=fp.bill_id
		where f.profit_cfplanner_id=#{userId} 
		 	and (fp.`status` is null or fp.`status` != 2) 
		and f.fee_amount > 0
		and date_format(f.create_time, '%Y-%m')=#{month}
		GROUP BY f.bill_id, f.fee_type
		
union all

SELECT 
'' as feeRate,
r.reward_time as createTime,
r.remark,
r.trans_amount as amount,
'' as feeType,
case when r.trans_type='15' then '4'
		when r.trans_type='12' then '1'
		when r.trans_type='4' then '3'
		when r.trans_type='3' then '5'
		when r.trans_type='14' then '6' end as profixType,
case when r.trans_type='15' then '团队leader奖'
		when r.trans_type='12' then '基础佣金'
		when r.trans_type='4' then '红包'
		when r.trans_type='3' then '活动奖励'
		when r.trans_type='14' then '活动奖励' end as profixTypeName,
case 	when r.trans_type='3' then 'T呗活动'
		when r.trans_type='14' then '猎财活动' end as typeSuffix,
'' as deadline,
'' as productName,
'' as productAmount,
'' as isFixedDeadline,
'' as deadLineMinSelfDefined,
'' as deadLineMinValue,
'' as deadLineMaxSelfDefined,
'' as deadLineMaxValue,
'' as originCfplannerName,
'' as isRedemption,
'' as orgFeeType
	    from tac_offline_reward_draft r 
		where user_id=#{userId}
		and r.`status`=0
		and date_format(r.reward_time, '%Y-%m')=#{month}
	
) t 
ORDER BY createTime desc

    </if>
    <if test="profixType == 2"><!-- 已发放 -->
	    select * from (
SELECT f.fee_rate feeRate, f.create_time createTime, fe.remark,IFNULL(sum(f.fee_amount),0) amount,f.fee_type feeType,
case when f.fee_type='1001' then '1'
		when f.fee_type='1002' then '2'
		when f.fee_type='1005' then '7'
		when f.fee_type='1006' then '8' end as profixType,
case when f.fee_type='1001' then '基础佣金'
		when f.fee_type='1002' then '推荐奖励'
		when f.fee_type='1005' then '直接管理津贴'
		when f.fee_type='1006' then '团队管理津贴' end as profixTypeName,
'' as typeSuffix,
	    case when f.product_id is null then 
		CONCAT( ui.product_dead_line , 
		case when ui.product_dead_line_type=1 then '天' 
		when ui.product_dead_line_type=2 then '月'
		when ui.product_dead_line_type=3 then '年' end )  end as deadline,
		p.product_name productName, IFNULL(f.product_amount,0) productAmount,
		p.is_fixed_deadline isFixedDeadline,
		p.dead_line_min_self_defined deadLineMinSelfDefined,
		p.dead_line_min_value deadLineMinValue,
		p.dead_line_max_self_defined deadLineMaxSelfDefined,
		p.dead_line_max_value deadLineMaxValue,
		(select user_name from tcrm_user_info where user_id=f.origin_cfplanner_id)  originCfplannerName,
		p.is_redemption isRedemption,
		i.org_fee_type orgFeeType
		 from tcim_feedetail f
		LEFT JOIN tcim_fee fe on f.bill_id=fe.bill_id and f.fee_type=fe.fee_type and f.profit_cfplanner_id=fe.profit_cfplanner_id
		LEFT JOIN tcim_product p on f.product_id=p.product_id
		LEFT JOIN tcim_org_info i on p.org_number= i.org_number
		LEFT JOIN tcim_product_unrecord_invest ui on f.bill_id=ui.invest_id
		LEFT JOIN tcim_fee_pay fp on f.balance_number=fp.bill_id
		where f.profit_cfplanner_id=#{userId}
		 	and fp.`status` = 2
		and date_format(f.create_time, '%Y-%m')=#{month}
		GROUP BY f.bill_id, f.fee_type
		
union all		
		SELECT f.product_fee_rate feeRate, f.create_time createTime, fe.remark,IFNULL(sum(f.fee_amount),0) amount,f.fee_type feeType,
case when f.fee_type='1001' then '1'
		when f.fee_type='1002' then '2'
		when f.fee_type='1005' then '7'
		when f.fee_type='1006' then '8'  end as profixType,
case when f.fee_type='1001' then '基础佣金'
		when f.fee_type='1002' then '推荐奖励'
		when f.fee_type='1005' then '直接管理津贴'
		when f.fee_type='1006' then '团队管理津贴' end as profixTypeName,
    '' as typeSuffix,
	  '' deadline,
		p.productName productName, IFNULL(f.product_amount,0) productAmount,
		'' isFixedDeadline,
		'' deadLineMinSelfDefined,
		'' deadLineMinValue,
		'' deadLineMaxSelfDefined,
		'' deadLineMaxValue,
		(select user_name from tcrm_user_info where user_id=f.origin_cfplanner_id)  originCfplannerName,
		'' isRedemption,
		'' orgFeeType
		 from tcim_insurance_feedetail f
		LEFT JOIN tcim_insurance_fee fe on f.bill_id=fe.bill_id and f.fee_type=fe.fee_type and f.profit_cfplanner_id=fe.profit_cfplanner_id
		LEFT JOIN tcim_insurance_product p on f.product_id=p.caseCode
		LEFT JOIN tcim_insurance_info i on p.org_number= i.org_number
		LEFT JOIN tcim_fee_pay fp on f.balance_number=fp.bill_id
		where f.profit_cfplanner_id=#{userId} 
		and fp.`status` = 2 
		and f.fee_amount > 0
		and date_format(f.create_time, '%Y-%m')=#{month}
		GROUP BY f.bill_id, f.fee_type

union all

SELECT 
'' as feeRate,
r.reward_time as createTime,
r.remark,
r.trans_amount as amount,
'' as feeType,
case when r.trans_type='15' then '4'
		when r.trans_type='12' then '1'
		when r.trans_type='4' then '3'
		when r.trans_type='3' then '5'
		when r.trans_type='14' then '6' end as profixType,
case when r.trans_type='15' then '团队leader奖'
		when r.trans_type='12' then '基础佣金'
		when r.trans_type='4' then '红包'
		when r.trans_type='3' then '活动奖励'
		when r.trans_type='14' then '活动奖励' end as profixTypeName,
case when r.trans_type='3' then 'T呗活动'
		when r.trans_type='14' then '猎财活动' end as typeSuffix,
'' as deadline,
'' as productName,
'' as productAmount,
'' as isFixedDeadline,
'' as deadLineMinSelfDefined,
'' as deadLineMinValue,
'' as deadLineMaxSelfDefined,
'' as deadLineMaxValue,
'' as originCfplannerName,
'' as isRedemption,
'' as orgFeeType
	    from tac_offline_reward_draft r 
		where user_id=#{userId}
		and r.`status`=1
		and date_format(r.reward_time, '%Y-%m')=#{month}

union all

SELECT 
'' as feeRate,
r.create_time as createTime,
r.remark,
r.trans_amount as amount,
'' as feeType,
case when r.trans_type='15' then '4'
		when r.trans_type='12' then '1'
		when r.trans_type='4' then '3'
		when r.trans_type='3' then '5'
		when r.trans_type='14' then '6'
		when r.trans_type='17' then '6'
		when r.trans_type='24' then '1' end as profixType,
case when r.trans_type='15' then '团队leader奖'
		when r.trans_type='12' then '基础佣金'
		when r.trans_type='4' then '红包'
		when r.trans_type='3' then '活动奖励'
		when r.trans_type='14' then '活动奖励'
		when r.trans_type='17' then '签到奖励金(转入)'
		when r.trans_type='24' then '个人加佣券加佣' end as profixTypeName,
case 	when r.trans_type='3' then 'T呗活动'
		when r.trans_type='14' then '猎财活动' end as typeSuffix,
'' as deadline,
'' as productName,
'' as productAmount,
'' as isFixedDeadline,
'' as deadLineMinSelfDefined,
'' as deadLineMinValue,
'' as deadLineMaxSelfDefined,
'' as deadLineMaxValue,
'' as originCfplannerName,
'' as isRedemption,
'' as orgFeeType
	    from tac_balance_record r 
		where 
 user_id=#{userId}
 <if test="month &gt;= '2017-01'">
 and create_type=0
and trans_type in (3,4,14,17,24)
 </if>
 <if test="month &lt; '2017-01'">
and ((trans_type in(12,15) and create_type=1) or trans_type in (3,4,14) )
 </if>
		and date_format(r.create_time, '%Y-%m')=#{month}
	
) t 
ORDER BY createTime desc
    </if>
    
    </select>
    
    
    <select id="accountBalanceDetails" resultMap="AccountBalanceListMap" >
		<![CDATA[select t.type_name,t.trans_amount,t.trans_date,t.fee,t.remark from 

		(select tat.type_name,tbr.trans_amount,tbr.trans_date,tbr.fee,tbr.remark from 
		 tac_balance_record tbr LEFT JOIN tac_account_type tat on tbr.trans_type = tat.type_value 
		where tbr.user_id=#{userId} and tbr.trans_type <> 2 
		union all
		select '提现' type_name,twa.amount trans_amount,twa.created_date trans_date,twa.fee,
		case when twa.status=5 then '提现成功' when twa.status=6 then '提现失败' when twa.status=7 then '提现失败' else twa.payment_date end remark 
		from tac_withdraw_apply twa where twa.user_id=#{userId} ) t 
		
		where 1=1 order by t.trans_date desc ]]>   
    </select>

</mapper>